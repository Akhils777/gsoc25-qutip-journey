[
  {
    "objectID": "posts/intro/index.html",
    "href": "posts/intro/index.html",
    "title": "Excited to Join GSoC 2025 with QuTiP-QOC!",
    "section": "",
    "text": "I am incredibly excited to announce that I have been selected for Google Summer of Code (GSoC) 2025 with the QuTiP community! This is a fantastic opportunity to deepen my understanding of quantum optimal control and contribute to a cutting-edge open-source project.\nIn this blog series, I will share my weekly progress, the challenges I face, how I overcome them, and my plans moving forward. To kick off, here is an overview of the project and its key goals."
  },
  {
    "objectID": "posts/intro/index.html#project",
    "href": "posts/intro/index.html#project",
    "title": "Excited to Join GSoC 2025 with QuTiP-QOC!",
    "section": "Project",
    "text": "Project\nThe project I will be working on is titled ‚ÄúQuTiP-QOC: Advancing Quantum Optimal Control Algorithms‚Äù.\n\nProblem Statement\nThis project proposes the direct integration of advanced quantum optimal control algorithms‚ÄîGRAPE (Gradient Ascent Pulse Engineering), CRAB (Chopped Random Basis), JOPT (Joint Optimization), and GOAT (Gradient Optimization of Analytic Controls)‚Äîinto the qutip-qoc package, eliminating its current dependency on the separate qutip-qtrl library.\nBy re-implementing these algorithms in a modular, maintainable, and efficient manner‚Äîleveraging QuTiP‚Äôs core functionality‚Äîthis project aims to modernize and unify the quantum control stack within QuTiP. This integration will provide a streamlined, flexible foundation that supports state-of-the-art optimization methods and improved numerical performance.\nMoreover, this work sets the stage for replacing dependencies in related projects such as qutip-qip, moving from qutip-qtrl to qutip-qoc. This transition will enable greater flexibility and the adoption of more advanced and varied optimization techniques for precise quantum circuit control and manipulation.\nObjectives\n\nIntegrate a standalone FidelityComputer system to replace legacy fidelity computation methods, improving modularity and maintainability.\n\nSupport multiple fidelity types including PSU, SU, and TRACEDIFF, and handle both state and process fidelities.\n\nAchieve compatibility with JAX to enable accelerated numerical computation and differentiation.\n\nRefactor existing optimization algorithms (e.g., GRAPE, CRAB) to utilize the new fidelity system for improved performance and flexibility.\n\nEnsure numerical consistency with the legacy fidelity module and maintain backward compatibility.\n\nActively work to resolve currently failing test cases related to state-to-state and parameterized optimizations.\n\nDocument the new fidelity system thoroughly and provide example notebooks to help users adopt the improved framework.\n\nMentors\n\nAlex Pitchford\n\nBoxi Li"
  },
  {
    "objectID": "posts/intro/index.html#why-this-project-matters",
    "href": "posts/intro/index.html#why-this-project-matters",
    "title": "Excited to Join GSoC 2025 with QuTiP-QOC!",
    "section": "Why this project matters?",
    "text": "Why this project matters?\nQuantum optimal control plays a critical role in manipulating quantum systems with high precision, which is essential for quantum computing, sensing, and communication technologies. By improving QuTiP-QOC‚Äôs algorithms and modularizing fidelity computations, this project will help researchers and developers design and analyze quantum control sequences more efficiently.\nThe enhanced fidelity system will provide a flexible, maintainable foundation for future algorithm development and integration with high-performance computing tools. Ultimately, this project will contribute to accelerating advancements in quantum computing by enabling more precise and accessible quantum control solutions.\n\nStay tuned for weekly updates on my journey through this exciting project. I look forward to sharing what I learn and build over the summer!"
  },
  {
    "objectID": "posts/Coding Begins week 2/index.html",
    "href": "posts/Coding Begins week 2/index.html",
    "title": "Week#2",
    "section": "",
    "text": "What did I do this week?\nOver the past week, I‚Äôve been working on analyzing two open issues in the QuTiP-QOC GitHub repository, as discussed in our weekly meeting. These issues highlight important discrepancies in the behavior of optimization algorithms for open quantum systems and represent a significant opportunity to improve reliability and correctness.\n\n\nüìå Issue #47: JOPT Fails for Open-System State Transfer\nSummary:\nWhen using the JOPT algorithm to solve a simple open-system state transfer problem (qubit from ground to excited state), the optimization crashes with a ValueError related to a dimension mismatch in the Liouville representation.\nFindings: - The issue arises during the construction of the adjoint of a matrix difference in the JOPT fidelity computation. - The mismatch in shapes ((4, 1) vs (1, 4)) suggests a bug in how the density matrix difference is reshaped and handled in Liouville space. - Notably, the exact same control setup works fine with GOAT, indicating that this is a JOPT-specific bug.\nüëâ View Issue #47\n\n\n\nüìå Issue #46: GRAPE Infidelity Mismatch\nSummary:\nThe GRAPE algorithm reports a final infidelity below the target threshold (0.0008), but manual simulation using the optimized control returns a significantly worse infidelity (0.0038).\nFindings: - Manual evolution was independently verified using both exponential propagators and mesolve, and the results are consistent. - This suggests that GRAPE either overestimates fidelity internally or there‚Äôs a bug in its cost function or propagation logic. - A ~300% mismatch raises concerns about the reliability of convergence metrics, especially in open-system scenarios.\nüëâ View Issue #46\n\n\n\n\nPlan for next week?\nNext week, I‚Äôll focus on:\n\nDigging deeper into the JOPT dimension mismatch in open-system Liouville space dynamics (Issue #47) and verifying reshaping logic and adjoint consistency\nInvestigating GRAPE‚Äôs fidelity evaluation pathway (Issue #46) to locate possible discrepancies in how cost values are tracked or computed internally\nPrototyping potential fixes in a sandboxed environment without affecting core modules\nDepending on the outcome of these investigations, I plan to raise a PR addressing one or both issues if the proposed fixes prove reliable and non-breaking\n\n\n‚ÄúI‚Äôm motivated by the opportunity to resolve foundational bugs and improve reliability in QuTiP-QOC‚Äôs optimization backend ‚Äî each fix brings us closer to a more robust and trustworthy control framework.‚Äù"
  },
  {
    "objectID": "posts/before-coding-begins/index.html",
    "href": "posts/before-coding-begins/index.html",
    "title": "Before-Coding-Begins",
    "section": "",
    "text": "What did I do this week?\nThis week, I worked further on resolving Issue #10, which involves replacing the legacy qutip_qtrl.fid_computer with a modern and modular FidelityComputer class designed for quantum optimal control workflows.\nPreviously, I had submitted a preliminary version of this class supporting multiple fidelity types (PSU, SU, TRACEDIFF) and ensuring compatibility with JAX for automatic differentiation. However, based on further reflection, I decided to hold off on raising a pull request and instead focused on polishing the implementation.\nThe major highlight of the week was addressing the previously failing test cases for:\n\nState-to-state GRAPE optimization\nState-to-state CRAB optimization\nParameterized CRAB optimization\n\nThese failures were caused by subtle differences in fidelity expectations and numerical tolerances when switching to the new engine. I resolved them by:\n\nEnsuring consistent handling of input shapes and data types\nCarefully aligning fidelity formulae with the expected definitions in the test suite\nImproving numerical precision and tolerances where required\n\nAs a result, all tests now pass, including the edge cases that initially failed.\nBeyond that, the direction I‚Äôve been shaping for the FidelityComputer revolves around:\n\nModular structure: With clearer separation of state, process, and map fidelities in mind, the aim is to make each component independently extensible and easier to maintain.\nBatch support: Handling multiple quantum states or unitaries efficiently has been central to the design approach, and continues to shape how I think about scaling and performance.\nCleaner integration: Ensuring compatibility with GRAPE, CRAB, and other optimization methods remains a key goal ‚Äî something I‚Äôve been aligning the implementation toward as the project evolves.\n\nWhile the code is functionally complete, I plan to further refine and customize certain parts before raising the pull request.\n\n\nPlan for next week?\nNext week, I‚Äôll focus on:\n\nStudying the relevant sections from Alex‚Äôs PhD thesis ‚Äî especially Section 1.6: Quantum control function optimisation ‚Äî to deepen my understanding of GRAPE\nFinalizing and cleaning up the FidelityComputer interface\nContributing to documentation improvements as part of Issue #13, particularly:\n\nInvestigating the broken search functionality on the QuTiP-QOC documentation site\n\nRaising a well-documented and review-ready pull request\n\n\nI‚Äôm excited to be moving closer to a stable and efficient fidelity framework that can serve as the backbone of QuTiP-QOC‚Äôs optimization tools."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Akhil Pratap Singh",
    "section": "",
    "text": "Know more about me, [here]"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GSOC25-QUTIP-QOC-JOURNEY",
    "section": "",
    "text": "Week#2\n\n\n\n\n\n\n\n\nJun 10, 2025\n\n\nAkhil Pratap Singh\n\n\n\n\n\n\n\n\n\n\n\n\nCoding Begins! Week#1\n\n\n\n\n\n\n\n\nJun 5, 2025\n\n\nAkhil Pratap Singh\n\n\n\n\n\n\n\n\n\n\n\n\nBefore-Coding-Begins\n\n\n\n\n\n\n\n\nMay 27, 2025\n\n\nAkhil Pratap Singh\n\n\n\n\n\n\n\n\n\n\n\n\nCommunity Bonding and Initial Contributions\n\n\n\n\n\n\n\n\nMay 16, 2025\n\n\nAkhil Pratap Singh\n\n\n\n\n\n\n\n\n\n\n\n\nExcited to Join GSoC 2025 with QuTiP-QOC!\n\n\n\n\n\n\n\n\nMay 9, 2025\n\n\nAkhil Pratap Singh\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Coding Begins week 1/index.html",
    "href": "posts/Coding Begins week 1/index.html",
    "title": "Coding Begins! Week#1",
    "section": "",
    "text": "What did I do this week?\nThis week, I focused on two important areas: deepening my understanding of the GRAPE algorithm and working on the QuTiP-QOC documentation system.\nüìò Studying GRAPE from Alex‚Äôs PhD Thesis\nAs planned, I studied Section 1.6: Quantum control function optimisation from [Alex‚Äôs PhD thesis]. This section provided a clear and compact overview of gradient-based control optimization techniques in open quantum systems. The insights from this theory helped me better understand how GRAPE is structured and how its gradients behave under Lindblad dynamics ‚Äî which is crucial for aligning implementation with mathematical expectations.\nüõ†Ô∏è Fixing the Documentation Search Issue\nI also worked on Issue #13, specifically the part about the search functionality being broken on the documentation website.\nHere‚Äôs what I discovered:\n\nWhen building the documentation locally using the officially supported Sphinx setup (make html in the doc/ directory), the search functionality works as expected.\nHowever, when I visited the published documentation site and tried to search for any term, the search bar keeps showing ‚ÄúSearching‚Ä¶‚Äù indefinitely and never returns any results.\n\nWe discussed this during our chat, and I showed the working version on my local machine. Based on that, we suspected the problem might be due to JavaScript dependencies like jQuery not being correctly loaded in the deployed environment. As a potential fix, I modified the conf.py file to explicitly include jQuery:\n```python html_js_files = [ ‚Äòhttps://code.jquery.com/jquery-3.6.0.min.js‚Äô,]\n\n \n\n\nLocalhost (Working) Live Website (Broken)\n\n\n\nPlan for next week\nNext week, I‚Äôll focus on:\n\nReproducing and analyzing Issue #47, which involves a dimension mismatch error in JOPT during fidelity computation in Liouville space.\nInvestigating Issue #46, where GRAPE reports inaccurate fidelity results compared to manual simulations.\n\n\nI‚Äôm looking forward to tackling these deeper optimization challenges while strengthening the documentation that will support future contributors."
  },
  {
    "objectID": "posts/community-bond/index.html",
    "href": "posts/community-bond/index.html",
    "title": "Community Bonding and Initial Contributions",
    "section": "",
    "text": "What did I do this week?\nThis week, I focused on immersing myself deeply into the QuTiP-QOC codebase to understand the architecture and workflows, especially around the fidelity calculation system which is critical for quantum optimal control algorithms. I carefully read through the documentation and explored the repository, including related issues and pull requests, to grasp how different modules interact.\nA major highlight was working on Issue #10, where I contributed a Pull Request to integrate a new FidelityComputer system that replaces the old qutip_qtrl.fid_computer dependency. This new system introduces support for PSU, SU, and trace difference fidelity types, adds state and process fidelity calculations, and ensures compatibility with JAX for automatic differentiation.\nWhile the PR is a work-in-progress with three failing test cases (state-to-state GRAPE and CRAB optimizations, and parameterized CRAB), the rest of the tests show numerical consistency and improved fidelity handling. This refactoring will help make the optimization algorithms more robust and maintainable.\nAdditionally, I set up my development environment, ran existing test suites, and planned how to address the failing tests in the upcoming weeks. I also connected with my mentors and the QuTiP-QOC community, which has been encouraging and insightful.\n\n\nPlan for next week?\nMy next goal is to fix the failing test cases related to state-to-state optimizations and parameterized CRAB algorithms. I will continue enhancing the fidelity module and work on expanding the test coverage to ensure the new system fully replaces the legacy one without regression.\n\nLooking forward to making steady progress and sharing updates as I dive deeper into quantum optimal control!"
  }
]